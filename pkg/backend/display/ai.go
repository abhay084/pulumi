// Copyright 2025, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package display

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"strings"
	"time"

	"github.com/pulumi/pulumi/pkg/v3/backend/display/internal/terminal"
	"github.com/pulumi/pulumi/pkg/v3/engine"
	"github.com/pulumi/pulumi/sdk/v3/go/common/apitype"
	"github.com/pulumi/pulumi/sdk/v3/go/common/diag/colors"
	"github.com/pulumi/pulumi/sdk/v3/go/common/resource"
	"github.com/pulumi/pulumi/sdk/v3/go/common/tokens"
	"github.com/pulumi/pulumi/sdk/v3/go/common/util/cmdutil"
	"github.com/pulumi/pulumi/sdk/v3/go/common/util/contract"
)

// CopilotErrorSummaryMetadata contains metadata about a Copilot error summary.
type CopilotErrorSummaryMetadata struct {
	Summary string // The summary generated by Copilot.
}

// ExplainFailureLink returns the link that will open Copilot and trigger it to explain the failure on the given
// permalink.
func ExplainFailureLink(permalink string) string {
	return permalink + "?explainFailure"
}

// copilotDelimiterEmoji provides an end of line delimiter for Copilot diagnostics header.
// Either an emoji or a colon is displayed, rendering a colon next to an emoji looks cluttered.
// Exposed here for testing.
func copilotDelimiterEmoji() string {
	return cmdutil.EmojiOr(" âœ¨", ":")
}

// RenderCopilotErrorSummary renders a Copilot error summary to the console.
func RenderCopilotErrorSummary(summary *CopilotErrorSummaryMetadata, err error, opts Options, permalink string) {
	out := opts.Stdout
	if out == nil {
		out = os.Stdout
	}

	// Copilot does not generate a summary under some conditions. It may have been disabled on the server etc.
	// Don't render anything in that case.
	if err == nil && summary == nil {
		return
	}

	// Generate the header
	header := opts.Color.Colorize(
		colors.SpecHeadline + "Copilot Diagnostics" + copilotDelimiterEmoji() + colors.Reset)
	fmt.Fprintln(out, header)

	// Print the error if there was one and return.
	if err != nil {
		fmt.Fprintf(out, "  error summarizing update output: %s\n", err)
		fmt.Fprintln(out)
		return
	}

	summaryLines := strings.Split(summary.Summary, "\n")
	for _, line := range summaryLines {
		fmt.Fprintln(out, "  "+opts.Color.Colorize(colors.BrightGreen+line+colors.Reset))
	}
	fmt.Fprintln(out)

	if opts.ShowLinkToCopilot {
		PrintCopilotLink(out, opts, permalink)
	}
}

func PrintCopilotLink(out io.Writer, opts Options, permalink string) {
	fmt.Fprintln(out, "  "+"Would you like additional help with this update?")
	fmt.Fprintln(out, "  "+
		opts.Color.Colorize(colors.Underline+colors.BrightBlue+ExplainFailureLink(permalink)+colors.Reset))
	fmt.Fprintln(out)
}

// setupProgressDisplay creates and initializes a ProgressDisplay with the given parameters.
// It enforces consistent display settings:
//
//	opts.Color = colors.Never
//	opts.RenderOnDirty = false
//	opts.IsInteractive = true
func setupProgressDisplay(
	action apitype.UpdateKind,
	stack tokens.StackName,
	proj tokens.PackageName,
	permalink string,
	opts Options,
	isPreview bool,
	width, height int,
) (*ProgressDisplay, Options) {
	o := opts
	if o.term == nil {
		o.term = terminal.NewSimpleTerminal(o.Stdout, width, height)
	}
	o.Color = colors.Never
	o.RenderOnDirty = false
	o.IsInteractive = true

	printPermalinkInteractive(o.term, o, permalink, "")
	renderer := newInteractiveRenderer(o.term, permalink, o)
	display := &ProgressDisplay{
		action:                action,
		isPreview:             isPreview,
		isTerminal:            true,
		opts:                  o,
		renderer:              renderer,
		stack:                 stack,
		proj:                  proj,
		sames:                 make(map[resource.URN]bool),
		eventUrnToResourceRow: make(map[resource.URN]ResourceRow),
		suffixColumn:          int(statusColumn),
		suffixesArray:         []string{"", ".", "..", "..."},
		displayOrderCounter:   1,
		opStopwatch:           newOpStopwatch(),
		permalink:             permalink,
	}
	renderer.initializeDisplay(display)

	return display, o
}

// processProgressEvents processes a stream of engine events using the given ProgressDisplay.
// This is the core processing logic shared by all progress event rendering functions.
func processProgressEvents(display *ProgressDisplay, events <-chan engine.Event, done chan<- bool) {
	display.processEvents(&time.Ticker{}, events)
	contract.IgnoreClose(display.renderer)

	// let our caller know we're done.
	close(done)
}

// RenderProgressEvents renders the engine events as if to a terminal, providing a simple interface
// for rendering the progress of an update.
//
// A "simple" terminal is used which does not render control sequences. The simple terminal's output
// is written to opts.Stdout.
//
// For consistent output, these settings are enforced:
//
//	opts.Color = colors.Never
//	opts.RenderOnDirty = false
//	opts.IsInteractive = true
func RenderProgressEvents(
	op string,
	action apitype.UpdateKind,
	stack tokens.StackName,
	proj tokens.PackageName,
	permalink string,
	events <-chan engine.Event,
	done chan<- bool,
	opts Options,
	isPreview bool,
	width, height int,
) {
	display, _ := setupProgressDisplay(action, stack, proj, permalink, opts, isPreview, width, height)
	processProgressEvents(display, events, done)
}

type CaptureProgressEvents struct {
	Buffer  *bytes.Buffer
	display *ProgressDisplay
}

// NewCaptureProgressEvents creates a buffer-backed progress display for event rendering.
// It returns a CaptureProgressEvents instance that can be used to access both the output and
// the display instance after processing the events. This is useful for detecting whether a
// failure was detected in the display layer, e.g. used to send the output to Copilot if a
// failure was detected.
func NewCaptureProgressEvents(
	stack tokens.StackName,
	proj tokens.PackageName,
	opts Options,
	isPreview bool,
	action apitype.UpdateKind,
) *CaptureProgressEvents {
	buffer := bytes.NewBuffer([]byte{})

	// Create a copy of the options and redirect output to our buffer
	o := opts
	o.Stdout = buffer
	o.Stderr = io.Discard

	// Use standard dimensions for the captured output
	width, height := 200, 80

	// Setup with empty permalink
	display, _ := setupProgressDisplay(action, stack, proj, "", o, isPreview, width, height)

	return &CaptureProgressEvents{
		Buffer:  buffer,
		display: display,
	}
}

func (r *CaptureProgressEvents) ProcessEvents(
	renderChan <-chan engine.Event,
	renderDone chan<- bool,
) {
	// Reuse the shared processing logic
	processProgressEvents(r.display, renderChan, renderDone)
}

func (r *CaptureProgressEvents) ProcessEventSlice(events []engine.Event) {
	eventsChan := make(chan engine.Event)
	renderDone := make(chan bool)
	go r.ProcessEvents(eventsChan, renderDone)
	for _, event := range events {
		eventsChan <- event
	}
	close(eventsChan)
	<-renderDone
}

func (r *CaptureProgressEvents) Output() []string {
	v := strings.TrimSpace(r.Buffer.String())
	if v == "" {
		return nil
	}
	return strings.Split(v, "\n")
}

func (r *CaptureProgressEvents) OutputIncludesFailure() bool {
	// If its an actual update we can use the failed flag
	if !r.display.isPreview {
		return r.display.failed
	}

	// If its a preview we need to check the resource rows for any failures
	for _, row := range r.display.resourceRows {
		diagInfo := row.DiagInfo()
		if diagInfo != nil && diagInfo.ErrorCount > 0 {
			return true
		}
	}

	return false
}
